---
description: 
globs: 
alwaysApply: false
---
Thanks for the detailed input. I’ll prepare a complete approach and working example for building an Ionic app from scratch that supports ESC/POS thermal printing with formatted receipts over USB, Bluetooth, Wi-Fi (TCP), and LAN on both Android and iOS. I’ll include the best plugins (Capacitor or Cordova as appropriate), printer connectivity handling, and cross-platform compatibility strategies.

I’ll update you once the research is ready.


# Building ESC/POS Printing in Ionic

To print formatted receipts (with headers, tables, QR codes) from an Ionic app, you can use existing Cordova/Capacitor plugins that speak the ESC/POS protocol.  Generally, **Cordova has a richer plugin ecosystem** for ESC/POS printers (Android and limited iOS support) compared to Capacitor, though Capacitor apps can still install Cordova plugins.  For example, the open-source [thermal-printer-cordova-plugin](https://github.com/paystory-de/thermal-printer-cordova-plugin) (Android only) wraps the popular DantSu ESC/POS library and supports Bluetooth, USB and TCP printing.  On iOS, generic ESC/POS printing is limited to BLE printers or vendor SDKs; one example plugin is [cordova-plugin-thermal-bluetooth-printer](https://github.com/bookmebus/cordova-plugin-thermal-bluetooth-printer) which provides `scanPrinter` and `printText` methods for BLE printers.

**Capacitor vs Cordova:** Capacitor offers a modern runtime (PWA support, current APIs), but many specialized plugins (like ESC/POS printer drivers) are still Cordova-based.  In practice, you can use Cordova ESC/POS plugins in a Capacitor app (via `npm i cordova-plugin-xxx && npx cap sync`).  Capacitor-specific printer plugins are emerging (e.g. community USB/BT printer plugins), but Cordova’s library is more mature.

## Connectivity Options

* **Bluetooth (Android):** Use a Cordova ESC/POS plugin (like thermal-printer-cordova-plugin). First, request Bluetooth permissions, then list paired devices and send data. For example:

  ```js
  // (after deviceready)
  ThermalPrinter.requestBTPermissions({ type: 'bluetooth' },
    () => console.log('BT permission granted'),
    (err) => console.error(err)
  );
  ThermalPrinter.listPrinters({ type: 'bluetooth' }, printers => {
    console.log('Available BT printers:', printers);
    let device = printers[0]; 
    // Print a formatted string:
    ThermalPrinter.printFormattedText({
      type: 'bluetooth',
      id: device.id, 
      text: "[C]<u><font size='big'>Store Name</font></u>\n"
          + "[L]Item A[R]$10.00\n"
          + "[L]Item B[R]$ 5.00\n"
          + "[C]<qrcode size='20'>https://example.com</qrcode>\n"
    }, () => console.log('Print success'), err=>console.error(err));
  }, err=>console.error(err));
  ```

  This uses the plugin’s `printFormattedText` API. Note the format tags (`[C]`, `<u>`, `<font>`, etc.) come from the underlying library’s syntax (see below).

  **Permissions:** In AndroidManifest.xml include `<uses-permission android:name="android.permission.BLUETOOTH" />` (and `BLUETOOTH_ADMIN` if targeting older APIs).  For Android 12+, also add `<uses-permission android:name="android.permission.BLUETOOTH_SCAN"/>` and `BLUETOOTH_CONNECT`. (The plugin’s `requestBTPermissions` call handles the runtime prompt.) On iOS, Bluetooth printing requires CoreBluetooth; add `NSBluetoothAlwaysUsageDescription` in Info.plist. Note iOS only supports BLE for third-party printers (no classic SPP), so only BLE-capable printers will work.

* **Bluetooth (iOS):** Use a BLE-capable plugin (e.g. [Bookmebus’s cordova-plugin-thermal-bluetooth-printer](https://github.com/bookmebus/cordova-plugin-thermal-bluetooth-printer)). That plugin exposes methods like `BmbBluetoothPrinter.scanPrinter()` and `printText()` for BLE devices. Its usage is similar: scan, connect, then send ESC/POS commands or images (via Base64).

* **USB (Android):** Android’s USB Host mode can be used for ESC/POS printers.  In your manifest, add `<uses-feature android:name="android.hardware.usb.host" />` and Internet/Bluetooth permissions as needed.  Using the Cordova thermal-printer plugin, you can list USB printers and request permission before printing:

  ```js
  ThermalPrinter.listPrinters({ type: 'usb' }, function(printers) {
    if (printers.length > 0) {
      let printer = printers[0];
      ThermalPrinter.requestPermissions(printer, function() {
        ThermalPrinter.printFormattedText({
          type: 'usb',
          id: printer.id,
          text: "[C]<u><font size='big'>Hello World</font></u>\n"
        }, 
        () => console.log('Printed via USB'), err=>console.error(err));
      }, function(err){
        console.error("USB permission denied", err);
      });
    } else {
      console.error('No USB printers found');
    }
  }, err=>console.error('List printers error', err));
  ```

  (This example is adapted from the plugin docs.) Android will prompt the user to allow USB access on first use.  **Note:** USB printing on iOS is generally not supported except via proprietary MFi connectors or vendor SDKs, so we typically only implement USB on Android.

* **Network TCP/Wi-Fi:** Most ESC/POS printers listen on port 9100 (or a similar port) over the LAN/Wi-Fi.  You can send raw ESC/POS bytes via TCP sockets. The thermal-printer plugin lets you print over TCP by specifying `type: 'tcp'`, address and port:

  ```js
  ThermalPrinter.printFormattedText({
    type: 'tcp',
    address: '192.168.1.123',
    port: 9100,
    id: 'printer-001',  // just an identifier
    text: "[C]<font size='big'>Hello World</font>\n"
  }, () => console.log('TCP print OK'), err=>console.error(err));
  ```

  . Ensure your app has Internet permission on Android.  On iOS, if you connect to a local network printer (not Internet), include `NSLocalNetworkUsageDescription` (and possibly `NSBonjourServices`) in Info.plist to satisfy iOS 14+ privacy requirements. You may need the user to input or select the printer’s IP address; some apps also perform network scans (if using Bonjour/mDNS) – in that case add `NSLocalNetworkUsageDescription` as shown.

## Receipt Formatting

ESC/POS printers support simple markup in the printing data (via the plugin’s formatter).  For example, the syntax for text alignment and styling (in the DantSu library) is:

* **Alignment/Columns:** Prefix lines with `[L]`, `[C]`, or `[R]` to left-/center-/right-align text. Multiple tags on one line can create columns. For example, `[L]Item[R]$10.00` prints “Item” on left and “\$10.00” on right.
* **Font/Style:** Use HTML-like tags: `<b>bold</b>`, `<u>underline</u>`, `<font size='big'>large</font>`, etc.  e.g. `<u><font size='big'>Title</font></u>` makes a large underlined title.
* **Images/Graphics:** Wrap a hex image string in `<img>...</img>` (usually generated from Base64).
* **Barcodes/QR codes:** Use `<barcode>data</barcode>` or `<qrcode>data</qrcode>`. For example, `<qrcode size='25'>https://example.com</qrcode>` prints a 25mm QR code.  Only one alignment tag can prefix these, and they must end with a newline after the closing tag.

**Example snippet:**

```
[C]<u><font size='big'>My Store</font></u>\n  
[L]Item A[R]$10.00\n  
[L]Item B[R]$ 5.00\n  
\n  
[C]<qrcode size='20'>https://example.com</qrcode>\n  
```

This would center “My Store” as a big underlined header, print two columns of items/prices, then a centered QR code.

## Silent vs Confirmed Printing

Most ESC/POS plugins **print silently** (no native OS dialog) by directly sending bytes to the printer. In the examples above, calling `printFormattedText` immediately sends data to the device (Bluetooth/USB/socket). If you need a user confirmation step, implement it in your UI (e.g. show a “Print?” button or dialog before calling the plugin).  Cordova’s iOS AirPrint plugin (`cordova-plugin-printer`) does show a native print dialog, but that is for PDF/web content – it does *not* apply to raw ESC/POS printing.

Some advanced plugins provide a progress dialog API (e.g. `CordovaPrint.initDialog`/`dismissDialog` for Wi-Fi scanning in the cordova-plugin-printerplugin), but for most cases you handle user prompts yourself.

## Example: Putting It All Together

Below is a simplified Ionic/Angular example using the Cordova thermal-printer plugin for Android. (Capacitor apps can install this plugin with `npx cap sync`.)

```ts
// In a component or service (TypeScript):
declare var ThermalPrinter: any;

async printReceipt() {
  // Ensure Bluetooth is enabled (Android).
  await ThermalPrinter.requestBTPermissions({ type: 'bluetooth' }, 
    () => console.log('BT permissions granted'), err=>console.error(err)
  );

  // List Bluetooth printers and pick one.
  ThermalPrinter.listPrinters({ type: 'bluetooth' }, (printers) => {
    if (!printers.length) {
      console.error('No Bluetooth printers paired');
      return;
    }
    let btPrinter = printers[0];
    // Define receipt content with ESC/POS tags:
    let receipt = (
      "[C]<u><font size='big'>My Store</font></u>\n" +
      "[L]Widget A[R]$12.99\n" +
      "[L]Widget B[R]$ 5.00\n" +
      "[L]Tax   [R]$ 1.80\n\n" +
      "[C]<qrcode size='20'>https://example.com/receipt/12345</qrcode>\n"
    );
    ThermalPrinter.printFormattedText(
      { type: 'bluetooth', id: btPrinter.id, text: receipt },
      () => console.log('Printed successfully!'),
      err => console.error('Print failed', err)
    );
  }, err => console.error('Error listing BT printers', err));
}
```

This code lists paired Bluetooth printers, formats a receipt with center and column tags, and prints it.  For a USB printer, you would use `listPrinters({type: 'usb'})` and `requestPermissions` as shown earlier. For TCP printing, replace `type:'bluetooth'` with `type:'tcp'` and add `address/port` fields.

## Platform Setup & Permissions

**Android:** In `AndroidManifest.xml`, add required features/permissions:

* `<uses-feature android:name="android.hardware.usb.host" />` (for USB host printing).
* `<uses-permission android:name="android.permission.BLUETOOTH" />` and `<uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />` (for legacy BT).
* For Android 12+ also add:
  `<uses-permission android:name="android.permission.BLUETOOTH_SCAN" />` and `<uses-permission android:name="android.permission.BLUETOOTH_CONNECT" />`.
* `<uses-permission android:name="android.permission.INTERNET" />` (for TCP/Wi-Fi).

At runtime, request Bluetooth permissions as shown.  For USB, the thermal plugin’s `requestPermissions` will invoke the Android USB permission dialog.

**iOS:** In your app’s Info.plist, include:

* `NSBluetoothAlwaysUsageDescription` (and optionally `NSBluetoothPeripheralUsageDescription`) with a user-facing message.  Without this, BLE printing will be rejected.
* `NSLocalNetworkUsageDescription` (Privacy – Local Network) if you connect to printers on the local Wi-Fi/LAN.  If you use Bonjour/mDNS discovery, also add the appropriate service type under `NSBonjourServices`.

No special entitlements are needed unless your printer requires MFi; most Wi-Fi/BLE printers just need the above privacy keys.

## Error Handling and Fallbacks

Always handle errors from the plugin calls. For example, if `listPrinters()` returns an empty list or if `requestPermissions` is denied, show an alert to the user (“Printer not found or permission denied”).  If a print attempt fails (error callback), retry or prompt the user to check the connection.  A simple strategy is: if Bluetooth fails, try letting the user pick another paired device; if TCP fails, let them enter the IP manually.  In code you might do:

```js
ThermalPrinter.listPrinters({type:'usb'}, printers => {
  if (!printers.length) {
    alert('No USB printer detected; please connect your printer.');
    return;
  }
  // ... proceed to print
}, err => {
  alert('Error finding USB printers: ' + err);
});
```

The plugin calls also often return status codes (for example, `Printer.printFormattedText` may fail if the printer is busy). Catch such errors and inform the user.  For network printing, you can first ping the printer’s IP (or attempt a socket connect) to detect if it’s reachable, and show an error if not.

By combining these plugins and following the setup above, your Ionic app can print ESC/POS-formatted receipts over **Bluetooth, USB, or TCP/LAN**.  All of the code samples and plugin usage shown here are based on well-maintained open-source libraries and official documentation (Android/iOS requirements), so you can adapt them into a working app from scratch.

**Sources:** We used the Cordova thermal-printer plugin docs and the underlying ESC/POS syntax guide, as well as Ionic/Cordova forum Q\&As and platform guides for Bluetooth/USB permissions. These provide practical examples and requirements for implementing ESC/POS printing in hybrid apps.
